\'use client\';

import React, { useEffect, useState, useCallback } from \'react\';
import { useParams, useRouter } from \'next/navigation\';
import { createClientComponentClient, User } from \'@supabase/auth-helpers-nextjs\';
import Link from \'next/link\';
import { FaArrowLeft, FaEnvelope, FaPaperPlane, FaSpinner } from \'react-icons/fa\';

interface ProjectDetails {\n  id: string;\n  name: string;\n  project_slug: string; // Or just slug if that\'s the column name used for matching\n  user_id: string; // Owner ID\n  // Add any other project fields you might want to display\n}\n\nexport default function ManageProjectMembersPage() {\n  const supabase = createClientComponentClient();\n  const params = useParams();\n  const router = useRouter();\n  const slug = params.slug as string;\n\n  const [authUser, setAuthUser] = useState<User | null>(null);\n  const [project, setProject] = useState<ProjectDetails | null>(null);\n  const [isOwner, setIsOwner] = useState(false);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n\n  const [inviteEmail, setInviteEmail] = useState(\'\');\n  const [inviteMessage, setInviteMessage] = useState<string | null>(null);\n  const [inviting, setInviting] = useState(false);\n\n  const fetchProjectAndUser = useCallback(async () => {\n    setLoading(true);\n    setError(null);\n\n    const { data: { user: currentUser } } = await supabase.auth.getUser();\n    setAuthUser(currentUser);\n\n    if (!currentUser) {\n      setError(\'You must be logged in to manage members.\');\n      setLoading(false);\n      // Optionally redirect: router.push(\'/login\');\n      return;\n    }\n\n    if (!slug) {\n      setError(\'Project slug is missing.\');\n      setLoading(false);\n      return;\n    }\n\n    const { data: projectData, error: projectError } = await supabase\n      .from(\'clients\') // Assuming projects are in \'clients\' table\n      .select(\'id, name, project_slug, user_id\') // Ensure \'project_slug\' matches your DB column if using it here\n      .eq(\'project_slug\', slug) // Match by slug\n      .single();\n\n    if (projectError) {\n      console.error(\'Error fetching project:\', projectError);\n      setError(`Failed to load project details: ${projectError.message}`);\n      setProject(null);\n    } else if (projectData) {\n      setProject(projectData as ProjectDetails);\n      if (projectData.user_id === currentUser.id) {\n        setIsOwner(true);\n      } else {\n        setError(\'You are not authorized to manage members for this project.\');\n        setIsOwner(false);\n      }\n    } else {\n      setError(\'Project not found.\');\n      setProject(null);\n    }\n    setLoading(false);\n  }, [slug, supabase, router]);\n\n  useEffect(() => {\n    fetchProjectAndUser();\n  }, [fetchProjectAndUser]);\n\n  const handleInviteUser = async (e: React.FormEvent) => {\n    e.preventDefault();\n    if (!inviteEmail.trim() || !project || !isOwner) {\n      setInviteMessage(\'Invalid email or insufficient permissions.\');\n      return;\n    }\n    setInviting(true);\n    setInviteMessage(null);\n\n    // Check if user already a member or invited (optional, good practice)\n    // For simplicity, directly inserting now\n\n    const { error: insertError } = await supabase\n      .from(\'project_memberships\')\n      .insert({\n        project_id: project.id,\n        // Assuming your project_memberships table can take an email directly\n        // or you might have a user_id column and need to find the user by email first.\n        // For now, let\'s assume an \'invitee_email\' column exists or is handled by a trigger/function.\n        // If storing user_id, you\'d need to get that first. For simplicity, using direct email if allowed.\n        // This part highly depends on your \'project_memberships\' table structure.\n        // A common approach is to store the invited user\'s ID if they exist, or just the email and a pending status.\n        // Let\'s use a placeholder for now, assuming you have a column to store the target user\'s ID, \n        // and another for status. We\'ll use email directly in a more generic field if allowed, or assume a lookup.\n\n        // Simplest case: a column for the email of the person being invited.\n        // Adjust these fields based on your actual \'project_memberships\' table.\n        // Option 1: Store email directly, status \'invited\'\n        // invitee_email: inviteEmail.trim(), \n        // Option 2: If you must store user_id, you need to fetch user by email first.\n        // For this example, assuming we can store email or a lookup will occur.\n        // Let\'s assume a general \`metadata\` field for the invite or a specific invitee_email column.\n        // This is a placeholder and NEEDS review based on your DB table structure.\n        invitee_email: inviteEmail.trim(), // Placeholder: adjust to your table structure\n        status: \'invited\',\n        role: \'member\', // Default role\n        invited_by: authUser?.id // Good to store who sent the invite\n      });\n\n    if (insertError) {\n      console.error(\'Error sending invitation:\', insertError);\n      setInviteMessage(`Failed to send invitation: ${insertError.message}`);\n    } else {\n      setInviteMessage(\`Invitation sent to ${inviteEmail}.\`);\n      setInviteEmail(\'\'); // Clear input\n    }\n    setInviting(false);\n  };\n\n  if (loading) {\n    return (\n      <div className=\"min-h-screen bg-gray-900 text-gray-100 flex flex-col items-center justify-center p-4\">\n        <FaSpinner className=\"animate-spin text-4xl mb-4\" />\n        <p>Loading project details...</p>\n      </div>\n    );\n  }\n\n  if (error) {\n    return (\n      <div className=\"min-h-screen bg-gray-900 text-gray-100 flex flex-col items-center justify-center p-4\">\n        <p className=\"text-red-400 text-lg mb-4\">{error}</p>\n        <Link href=\"/myprojects\" legacyBehavior>\n          <a className=\"text-sky-400 hover:text-sky-300 flex items-center\">\n            <FaArrowLeft className=\"mr-2\" /> Go back to My Projects\n          </a>\n        </Link>\n      </div>\n    );\n  }\n\n  if (!project) { // Should be covered by error state, but good check\n    return (\n        <div className=\"min-h-screen bg-gray-900 text-gray-100 flex flex-col items-center justify-center p-4\">\n            <p className=\"text-red-400 text-lg mb-4\">Project could not be loaded.</p>\n            <Link href=\"/myprojects\" legacyBehavior>\n            <a className=\"text-sky-400 hover:text-sky-300 flex items-center\">\n                <FaArrowLeft className=\"mr-2\" /> Go back to My Projects\n            </a>\n            </Link>\n        </div>\n    );\n  }\n\n  if (!isOwner) { // Explicitly handle non-owner after loading, error state should also catch this.\n    return (\n      <div className=\"min-h-screen bg-gray-900 text-gray-100 flex flex-col items-center justify-center p-4\">\n        <p className=\"text-red-400 text-lg mb-4\">You are not authorized to manage members for this project.</p>\n        <Link href={`/myprojects/${slug}`} legacyBehavior>\n          <a className=\"text-sky-400 hover:text-sky-300 flex items-center\">\n            <FaArrowLeft className=\"mr-2\" /> Go back to Project\n          </a>\n        </Link>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gray-900 text-gray-100 p-4 md:p-8\">\n      <main className=\"container mx-auto max-w-2xl\">\n        <div className=\"mb-6\">\n          <Link href={`/myprojects/${slug}`} legacyBehavior>\n            <a className=\"text-sky-400 hover:text-sky-300 inline-flex items-center mb-4\">\n              <FaArrowLeft className=\"mr-2\" /> Back to Project: {project.name}\n            </a>\n          </Link>\n          <h1 className=\"text-3xl md:text-4xl font-bold text-sky-400\">Manage Members</h1>\n          <p className=\"text-gray-400\">Project: {project.name} (ID: {project.id})</p>\n        </div>\n\n        <section className=\"bg-gray-800 shadow-xl rounded-lg p-6 mb-8 border border-gray-700/50\">\n          <h2 className=\"text-2xl font-semibold text-gray-200 mb-4\">Invite New Member</h2>\n          <form onSubmit={handleInviteUser} className=\"space-y-4\">\n            <div>\n              <label htmlFor=\"inviteEmail\" className=\"block text-sm font-medium text-gray-300 mb-1\">\n                User Email Address\n              </label>\n              <div className=\"relative\">\n                <div className=\"absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none\">\n                  <FaEnvelope className=\"text-gray-400\" />\n                </div>\n                <input\
            type=\"email\"\
            id=\"inviteEmail\"\
            name=\"inviteEmail\"\
            value={inviteEmail}\
            onChange={(e) => setInviteEmail(e.target.value)}\
            placeholder=\"user@example.com\"\
            required\
            className=\"bg-gray-700 border border-gray-600 text-gray-100 focus:ring-sky-500 focus:border-sky-500 block w-full pl-10 p-2.5 rounded-md shadow-sm\"\
          >\
        </div>\n            </div>\n            <button\
            type=\"submit\"\
            disabled={inviting || !inviteEmail.trim()}\
            className=\"w-full inline-flex items-center justify-center px-4 py-2.5 border border-transparent text-sm font-medium rounded-md shadow-sm text-white bg-sky-600 hover:bg-sky-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-sky-500 focus:ring-offset-gray-800 disabled:opacity-50 disabled:cursor-not-allowed\"\
            >\
              {inviting ? (\n                <FaSpinner className=\"animate-spin mr-2\" />\n              ) : (\n                <FaPaperPlane className=\"mr-2\" />\n              )}\
              Send Invitation\
            </button>\
          </form>\
          {inviteMessage && (\n            <p className={`mt-4 text-sm ${inviteMessage.startsWith(\'Failed\') ? \'text-red-400\' : \'text-green-400\'}`}>\
              {inviteMessage}\
            </p>\
          )}\
        </section>\
\n\n        {/* Placeholder for listing existing members and managing them */}\
        <section className=\"bg-gray-800 shadow-xl rounded-lg p-6 border border-gray-700/50\">\
            <h2 className=\"text-2xl font-semibold text-gray-200 mb-4\">Current Members & Invitations</h2>\
            <p className=\"text-gray-400 italic\">(List of current members, pending invitations, and management options will go here.)</p>\
            {/* Example: Fetch and display from project_memberships table */}\
        </section>\
\n\n      </main>\
    </div>\
  );\
}\n 